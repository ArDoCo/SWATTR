
 | 

1 | One | of | the | main | components | of | Media | Store | is | a | server-side | web | front | end | namely | the | Facade | component | which | delivers | websites | to | the | users | and | provides | session | management | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 

2 | To | meet | the | user | authentication | requirement | registration | and | log-in | have | to | be | offered | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

3 | To | this | end | the | Facade | component | delivers | the | corresponding | registration | and | log-in | pages | to | users | 
 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

4 | After | the | user | has | logged | into | the | system | he | or | she | will | be | forwarded | to | a | site | to | list | the | audio | files | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

5 | The | main | functionality | however | is | provided | by | other | components | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

6 | In | addition | users | can | browse | download | and | upload | audio | files | using | the | Facade | component | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 

7 | Application | business | logic | is | provided | by | a | central | business | logic | component | called | the | MediaManagement | component | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 

8 | The | MediaManagement | component | coordinates | the | communication | of | other | components | 
 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

9 | Furthermore | it | fetches | audio | files | from | a | specific | location | -LRB- | e.g | a | dedicated | file | server | or | a | local | disk | -RRB- | when | processing | download | requests | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

10 | As | described | above | to | communicate | with | the | system | users | registration | and | authentication | are | needed | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

11 | The | UserManagement | component | answers | the | requests | for | registration | and | authentication | 
 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

12 | The | UserDBAdapter | component | queries | the | database | 
 | 0 | 1 | 0 | 0 | 0 | 0 | 

13 | When | a | user | logs | into | the | system | Media | Store | does | not | store | the | password | in | plain | text | but | rather | the | UserManagement | component | implements | further | functions | to | hash | and | salt | the | passwords | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

14 | To | reduce | the | risk | of | copyright | infringements | all | downloaded | files | are | watermarked | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

15 | To | this | end | the | requested | files | are | first | reencoded | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

16 | The | re-encoded | files | are | then | digitally | and | individually | watermarked | by | the | TagWatermarking | component | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

17 | Afterward | the | MediaManagement | component | forwards | these | audio | files | from | the | TagWatermarking | component | to | the | user | 
 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

18 | Hence | each | downloaded | audio | file | is | uniquely | connected | to | a | user | ID | can | can | be | associated | with | the | user | if | the | audio | file | should | ever | appear | in | the | public | Internet | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

19 | To | allow | users | to | download | several | files | at | a | time | we | provide | the | Packaging | component | which | archives | multiple | audio | files | into | a | single | compressed | file | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

20 | The | ReEncoder | component | converts | the | bit | rates | of | audio | files | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

21 | This | can | result | in | reduction | of | file | sizes | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

22 | The | persistence | tier | contains | components | that | are | concerned | with | the | storage | of | audio | files | and | their | meta-data | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

23 | The | Database | component | represents | an | actual | database | -LRB- | e.g | MySQL | -RRB- | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

24 | It | stores | user | information | and | meta-data | of | audio | files | such | as | the | name | and | the | genre | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

25 | After | the | user | calls | the | page | to | list | all | available | audio | files | AudioAccess | creates | a | query | that | is | sent | to | the | Database | component | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

26 | When | a | user | uploads | an | audio | file | the | MediaAccess | component | stores | it | at | the | predefined | location | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

27 | The | MediaAccess | component | encapsulates | database | access | for | meta-data | of | audio | files | 
 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 

28 | Furthermore | it | fetches | a | list | of | all | available | audio | files | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

29 | by | contrast | the | UserDBAdapter | component | provides | all | functions | required | in | order | to | encapsulate | database | access | for | the | user | data | 
 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 

30 | The | UserDBAdapter | component | creates | a | query | based | on | the | user | 's | request | 
 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

31 | The | Database | component | then | executes | the | actual | query | for | files | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

32 | All | salted | hashes | of | passwords | are | also | stored | in | the | Database | component | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

33 | By | contrast | all | audio | files | are | stored | in | a | specific | location | -LRB- | e.g. | a | dedicated | file | server | or | a | local | disk | -RRB- | to | decouple | the | DataStorage | from | the | database | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

34 | When | a | user | requests | files | to | download | the | MediaAccess | component | fetches | the | associated | meta-data | from | the | Database | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

35 | Afterwards | based | on | the | user | request | and | the | corresponding | meta-data | the | file | will | be | retrieved | from | the | DataStorage | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

36 | When | a | user | uploads | a | file | it | will | be | stored | in | the | DataStorage | without | any | change | 
 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 

37 | However | a | download | can | cause | re-encoding | of | the | audio | file | 
 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 
